<!DOCTYPE html>
<html lang="zh-cmn-Hans">

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    
    <title>新冠疫情全球趋势图</title>

    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/datatables.min.css" />
    <script type="text/javascript" src="js/jquery.min.js"></script>
    <script type="text/javascript" src="js/bootstrap.min.js"></script>
    <script type="text/javascript" src="js/datatables.min.js"></script>

    <script type="text/javascript" src="js/d3.min.js"></script>

    <style type="text/css">

        #datagrid{
            width: 96vw;
            margin: 20px auto;
        }

        #charts {
            width: 96vw;
            margin: 40px auto;
            display: table;
        }

        h1,h2,h3,h4,h5,h6 {
            text-align: center;
        }

        #charts > svg {
            margin: 0 auto;
            display: table-cell;
        }
        
        .yl-axis line,
        .yl-axis path {
            stroke: SteelBlue;
        }
        
        .yl-axis text {
            color: SteelBlue;
        }
        
        .yr-axis line,
        .yr-axis path {
            stroke: FireBrick;
        }
        
        .yr-axis text {
            color: FireBrick;
        }
    </style>

</head>

<body>

    <h1>新冠疫情全球趋势图<h1>
    <h6>数据来自 <a href="https://worldometers.info" target="_blank">WorldOmeter</a> 昨日统计</h6>
    <h6>每日数据截至时间：格林威治时间0点(GMT+0) / 北京时间8点(GMT+8)</h6>

    <div id="datagrid"></div>
    <div id="charts"></div>

    <script>
        $(document).ready(function() {

            fetch("table.htm")
                .then(response => {
                    return response.text()
                })
                .then(data => {
                    document.querySelector("#datagrid").innerHTML = data;
                    $('#main_table_countries_yesterday').DataTable({
                        "order": [
                            [4, 'desc']
                        ],
                        paging: true,
                        searching: false,
                        info: false,
                        lengthChange: false,
                        pageLength: 50,
                        scrollX: true
                        
                    });
                });
        });
    </script>

    <script>
        d3.csv(`country.csv`)
            .then(c => gen(c))
        
        function gen(list) {

            list.forEach(function(c){
                c.country = c['country'];
                c.locale = c['locale'];
                console.log(c.country, c.locale);

                d3.select(`#charts`)
                .append("svg")
                .attr("id", `s-${c.country}`)
                .attr("width", 720)
                .attr("height", 400);

                d3.csv(`data/${c.country}.csv`)
                    .then(d => chart(d, c.country, c.locale));
            })

        }

        function chart(csv, country, locale) {

            var parseTime = d3.timeParse("%b %d");
            var formatTime = d3.timeFormat("%m-%d");

            var keys = ["Daily Cases", "Daily Deaths"]

            csv.forEach(function(d) {
                d.date = formatTime(parseTime(d["Date"]));
                d.cases = +d["Cases"];
                d.dailyCases = +d["Daily Cases"];
                d.death = +d["Death"];
                d.dailyDeaths = +d["Daily Deaths"];
                return d;
            })

            var svg = d3.select(`#s-${country}`);

            var margin = {
                    top: 20,
                    bottom: 20,
                    left: 50,
                    right: 10
                },
                width = +svg.attr("width") - margin.left - margin.right,
                height = +svg.attr("height") - margin.top - margin.bottom;

            var x0 = d3.scaleBand()
                .domain(csv.map(d => d.date))
                .rangeRound([margin.left, width - margin.right])
                .padding(0)
                .paddingInner(0)

            var x1 = d3.scaleBand()
                .domain(keys)
                .rangeRound([0, x0.bandwidth()])
                .padding(0)
                .paddingInner(0)

            var yl = d3.scaleLinear()
                .domain([0, d3.max(csv, d => d.dailyCases)]).nice()
                .range([height - margin.bottom, margin.top])

            var yr = d3.scaleLinear()
                .domain([0, d3.max(csv, d => d.dailyDeaths) * 2]).nice()
                .range([height - margin.bottom, margin.top])

            var xAxis = g => g
                .attr("transform", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x0)
                    .tickValues(x0.domain().filter(function(d, i) {
                        return !(i % 5)
                    })))
                .call(g => g.select(".domain").remove())

            var ylAxis = g => g
                .attr("transform", `translate(${margin.left},0)`)
                .call(d3.axisLeft(yl))
                .call(g => g.select(".tick:last-of-type text").clone()
                    .attr("text-anchor", "start")
                    .attr("transform", "rotate(90)")
                    .attr("y", -10)
                    .attr("x", 10)
                    .style("font-size", "12px")
                    .text("诊确增新日每"))

            var yrAxis = g => g
                .attr("transform", `translate(${width - margin.right},0)`)
                .call(d3.axisRight(yr))
                .call(g => g.select(".tick:last-of-type text").clone()
                    .attr("text-anchor", "end")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -10)
                    .attr("x", -10)
                    .style("font-size", "12px")
                    .text("每日新增死亡"))

            svg.append("g")
                .attr("class", "x-axis")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "start")
                .attr("dx", "1em")
                .attr("dy", "-1em")
                .attr("transform", "rotate(90)")
                .style("font-size", "8px");

            svg.append("g")
                .attr("class", "yl-axis")
                .call(ylAxis)

            svg.append("g")
                .attr("class", "yr-axis")
                .call(yrAxis)

            svg.append("text")
                .attr("x", 80)
                .attr("y", 100)
                .attr("text-anchor", "start")
                .style("font-size", "32px")
                .style("color", "SteelBlue")
                .text(locale)
            
            svg.append("text")
                .attr("x", 80)
                .attr("y", 68)
                .attr("text-anchor", "start")
                .style("font-size", "16px")
                .style("color", "SteelBlue")
                .text(country.toUpperCase())

            svg.append("g")
                .attr("class", "l-bar")
                .selectAll(".l-bar")
                .data(csv, d => d.date)
                .enter()
                .append("rect")
                .attr("transform", d => `translate(0,0)`)
                .attr("fill", "SteelBlue")
                .attr("x", d => x0(d.date))
                .attr("y", d => yl(d.dailyCases))
                .attr("width", 1.5)
                .attr("height", d => yl(0) - yl(d.dailyCases))

            svg.append("g")
                .attr("class", "r-bar")
                .selectAll(".r-bar")
                .data(csv, d => d.date)
                .enter()
                .append("rect")
                .attr("transform", d => `translate(1,0)`)
                .attr("fill", "FireBrick")
                .attr("x", d => x0(d.date))
                .attr("y", d => yr(d.dailyDeaths))
                .attr("width", 1.5)
                .attr("height", d => yr(0) - yr(d.dailyDeaths))


        }
    </script>
</body>

</html>